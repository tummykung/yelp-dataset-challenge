package weka.filters.supervised.attribute.gpattributegeneration;

import java.util.ArrayList;
import java.util.Random;

/**
 * Stores a gene node
 *  Ported from C#.
 * @author Luke Devonshire & Colin Noakes
 */
public class Gene
{
    private EnumGeneType type;
    private String sValue;

    /**
     * An empty Gene
     */
    public Gene()
    {

    }
    /**
     * A gene with the given value
     * @param geneValue The value to give the gene
     * @param isTerminal Whether the gene is a terminal or function node
     */
    public Gene(String geneValue, EnumGeneType gType)
    {
        type = gType;
        this.sValue = geneValue;
    }

    /**
     * Returns the type of the gene
     * @return The EnumGeneType enum that matches this gene's type
     */
    public EnumGeneType getType()
    {
        return type;
    }

    /**
     * Sets whether the node is a terminal or function
     * @param isTerminal True if Gene is a terminal; False if a function node
     */
    public void setType(EnumGeneType gType)
    {
        type = gType;
    }

    /**
     * Returns the Gene's value
     * @return The Gene's value
     */
    public String getValue()
    {
        return sValue;
    }

    /**
     * Generate a random value for the Gene. Half of the Genes generated by this are functions, half terminals
     * @param rand The Random generator to use
     * @param funcSet The set of available functions
     * @param validAttributes the valid numeric attributes that can be used as part of equations
     */
    public void generateValue(Random rand, ArrayList<String> funcSet, int[] validAttributes)
    {
        if (rand.nextInt(2) == 0)
        {
            generateValue(rand, EnumGeneType.TERMINAL, funcSet, validAttributes);
        }
        else
        {
            generateValue(rand, EnumGeneType.FUNCTION, funcSet, validAttributes);
        }
    }

    /**
     * Generate a random value for the gene of the specified type
     * @param rand The Random generator to use
     * @param gType Specifies whether a function or terminal should be generated
     * @param funcSet The set of available functions
     * @param validAttributes the valid numeric attributes that can be used as part of equations
     */
    public void generateValue(Random rand, EnumGeneType gType, ArrayList<String> funcSet, int[] validAttributes)
    {
        if (gType == EnumGeneType.FUNCTION)
        {
            type = EnumGeneType.FUNCTION;
            sValue = funcSet.get(rand.nextInt(funcSet.size()));
        }
        else
        {
            type = EnumGeneType.TERMINAL;
            sValue = generateTerminal(rand, validAttributes);
        }
    }

    /**
     * Generate a random value for the gene of the specified type taking into account the arity desired
     * @param rand The Random generator to use
     * @param isTerminal Specifies whether a function or terminal should be generated
     * @param funcSet The set of available functions
     * @param arity The desired arity
     * @param validAttributes the valid numeric attributes that can be used as part of equations
     */
    public void generateValue(Random rand, EnumGeneType gType, ArrayList<String> funcSet, int arity, int[] validAttributes)
    {
        if (gType == EnumGeneType.FUNCTION)
        {
            type = EnumGeneType.FUNCTION;

            //If arity is 1; choose from unary set, else choose from binary set
            if (arity == 1)
            {
                ArrayList<String> unaryFuncSet = Function.getUnaryFuncSet(funcSet);
                sValue = unaryFuncSet.get(rand.nextInt(unaryFuncSet.size()));
            }
            else
            {
                ArrayList<String> binaryFuncSet = Function.getBinaryFuncSet(funcSet);
                sValue = binaryFuncSet.get(rand.nextInt(binaryFuncSet.size()));
            }
        }
        else
        {
            type = EnumGeneType.TERMINAL;
            sValue = generateTerminal(rand, validAttributes);
        }
    }

    /**
     * Generate a terminal. Returned is either an attribute (denoted by aN; where N is the number of the attribute)
     *  or a double between 0 and 10.
     * @param rand The Random generator to use
     * @param validAttributes the valid numeric attributes that can be used as part of equations
     * @return A random terminal value of either a terminal variable 'aN' or a double between 0 and 10
     */
    private String generateTerminal(Random rand, int[] validAttributes)
    {
        //Half the time a terminal variable rather than a double is generated
        if (rand.nextInt(2) == 0)
        {
            return "a" + validAttributes[rand.nextInt(validAttributes.length)];
        }
        else
        {
            //Makes a double between 0 and 10
            return Double.toString(rand.nextDouble() * 10.0);
        }
    }

    /**
     * Returns the string representation of the gene
     * @return string representation of the gene
     */
    @Override
    public String toString()
    {
        return this.sValue;
    }
}
